@page "/add-trail"
@using System.IO;
@using System.Net.Http.Headers
@inject HttpClient HttpClient

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Add Trail</li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Add a trail</h3>

@if (submitSuccessful)
{
    <div class="alert alert-success" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
        </svg>
        Your trail has been submitted successfully!
    </div>
}
else if (!submitSuccessful && errorMessage.Length > 0)
{
    <div class="alert alert-danger" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
        </svg>
        @errorMessage
    </div>
}

<EditForm Model="_trail" OnValidSubmit="SubmitForm">
    <FluentValidationValidator />

    <div class="card bg-light">
        <div class="card-body">
            <div class="row">
                <div class="col-4">
                    <h4>Basic Details</h4>
                    <p class="text-secondary">This information is used to identify the trail and can be searched to help hikers find it.</p>
                </div>

                <div class="col-8">
                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label for="trailName" class="font-weight-bold text-secondary">Name</label>
                                <InputText @bind-Value="_trail.Name" class="form-control" id="trailName" />
                                <ValidationMessage For="@(() => _trail.Name)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label for="trailDescription" class="font-weight-bold text-secondary">Description</label>
                                <InputTextArea @bind-Value="_trail.Description" rows="6" class="form-control" id="trailDescription" />
                                <ValidationMessage For="@(() => _trail.Description)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-6">
                            <div class="form-group">
                                <label for="trailLocation" class="font-weight-bold text-secondary">Location</label>
                                <InputText @bind-Value="_trail.Location" class="form-control" id="trailLocation" />
                                <ValidationMessage For="@(() => _trail.Location)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label for="trailImage" class="font-weight-bold text-secondary">Image</label>
                                <InputFile OnChange="LoadTrailImage" class="form-control-file" id="trailImage" accept=".png,.jpg,.jpeg" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card bg-light mt-4">
        <div class="card-body">
            <div class="row">
                <div class="col-4">
                    <h4>Difficulty</h4>
                    <p class="text-secondary">Help other hikers out by telling them the length of the trail is how long it might take them.</p>
                </div>

                <div class="col-8">
                    <div class="row">
                        <div class="col-3">
                            <div class="form-group">
                                <label for="trailLength" class="font-weight-bold text-secondary">Length (km)</label>
                                <InputNumber @bind-Value="_trail.Length" class="form-control" id="trailLength" />
                                <ValidationMessage For="@(() => _trail.Length)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-5">
                            <div class="form-group">
                                <label for="trailTime" class="font-weight-bold text-secondary">Time</label>
                                <InputTime @bind-Value="_trail.TimeInMinutes" class="form-control" id="trailTime" />
                                <ValidationMessage For="@(() => _trail.TimeInMinutes)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card bg-light mt-4">
        <div class="card-body">
            <div class="row">
                <div class="col-4">
                    <h4>Route Instructions</h4>
                    <p class="text-secondary">Route instructions are a guide for the trail. This helps hikers new to the trail stay on track.</p>
                </div>

                <div class="col-8">
                    @{var i = 0;}
                    @foreach (var routeInstruction in _trail.Route)
                    {
                        i++;
                        routeInstruction.Stage = i;
                        <div class="row">
                            <div class="col-2">
                                <div class="form-group">
                                    <label for="routeInstructionStage" class="font-weight-bold text-secondary">Stage</label>
                                    <p>@routeInstruction.Stage</p>
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label for="routeInstructionDescription" class="font-weight-bold text-secondary">Description</label>
                                    <InputText @bind-Value="routeInstruction.Description" class="form-control" id="routeInstructionDescription" />
                                </div>
                            </div>
                            <div class="col-1 remove-trail-instruction">
                                <button @onclick="@(() => RemoveRouteInstruction(routeInstruction))" class="btn btn-link" type="button">
                                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill text-danger" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    }

                    <div class="row">
                        <div class="col">
                            @*tell people if this isn't type button the form blows up!*@
                            <button class="btn btn-outline-primary" type="button" @onclick="AddRouteInstruction">Add Instruction</button>
                            <ValidationMessage For="@(() => _trail.Route)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-right">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => _trail = new AddTrailRequest())">Reset</button>
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    AddTrailRequest _trail = new AddTrailRequest();
    bool submitSuccessful;
    IBrowserFile trailImage;
    string errorMessage = "";

    private void AddRouteInstruction()
    {
        _trail.Route.Add(new AddTrailRequest.RouteInstruction());
    }

    private void RemoveRouteInstruction(AddTrailRequest.RouteInstruction routeInstruction)
    {
        _trail.Route.Remove(routeInstruction);
    }

    private void LoadTrailImage(InputFileChangeEventArgs e) => trailImage = e.File;

    private async Task SubmitForm()
    {
        var response = await HttpClient.PostAsJsonAsync(AddTrailRequest.RouteTemplate, _trail);

        if (response.IsSuccessStatusCode)
        {
            var trailId = await response.Content.ReadFromJsonAsync<int>();
            var imageUploaded = await UploadTrailImage(trailId);

            if (imageUploaded)
            {
                _trail = new AddTrailRequest();
                submitSuccessful = true;
            }
            else
            {
                errorMessage = "Your trail was added, but there was a problem uploading the image.";
            }
        }
    }

    private async Task<bool> UploadTrailImage(int trailId)
    {
        var format = "image/jpeg";
        var imageFile = await trailImage.RequestImageFileAsync(format, 640, 426);

        if (imageFile != null)
        {
            var content = new MultipartFormDataContent();

            using var fileStream = imageFile.OpenReadStream(imageFile.Size);

            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(fileStream), "image", imageFile.Name);

            var response = await HttpClient.PostAsync(AddTrailImageRequest.RouteTemplate.Replace("{trailId}", "2"), content);

            return response.IsSuccessStatusCode;
        }

        return true;
    }
}
